@implements IDisposable
@inject NavigationManager Navigation
@inject StateService StateService
@inject GoogleDriveService GoogleDriveService
@inject ILogger<WorkoutPlayer> Logger

@if (player != null)
{
    <Header>
        <Left>
            <a href="" class="btn btn-link home-link"><i class="fa-solid fa-arrow-left"></i></a>
        </Left>
        <Middle>
            <h1 class="header-title">
                @player.Oefening.Naam
            </h1>
        </Middle>
        <Right>
            <LoginDisplay />
        </Right>
    </Header>

    <div class="progress">
        <div class="progress-bar" style="width: @(player.PercentageSetsAfgerond)%"></div>
    </div>

    <div class="oefening-afbeelding">
        @if (player.IsKlaar)
        {
            <img src="images/yeah.gif" alt="Yeah"/>
        }
        else if (player.Oefening.InitieelTonen == InitieelTonen.Afbeelding)
        {
            <img src="@player.Oefening.AfbeeldingUrl" alt="@player.Oefening.Naam"/>
        }
        else if (player.Oefening.InitieelTonen == InitieelTonen.Video)
        {
            <div class="embed-container">
                <embed src="@player.Oefening.VideoUrl" allowfullscreen allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share">
            </div>
        }

        @if (player.IsPauze)
        {
            <div class="pauze-achtergrond">
                <div class="pauze">
                    Pauze
                </div>
            </div>

            @if (player.SetNummer == player.Oefening.AantalSets)
            {
                <div class="volgende-set-preview">
                    <img src="@player.Volgende.AfbeeldingUrl" alt="@player.Volgende.Naam" />
                    <div class="naam-volgende-oefening">
                        @player.Volgende.Naam
                    </div>
                </div>
            }
        }
    </div>

    // todo: hieronder stylen



    @if (player.WorkoutStart != null)
    {
        <p class="workout-start">
            start: @player.WorkoutStart.Value.ToString("HH:mm"),
            duur: @(((player.WorkoutEind ?? DateTime.Now) - player.WorkoutStart.Value).ToString("hh\\:mm"))
        </p>
    }

    <div class="oefening">
        <Stack>



            <p class="oefening-nummer">
                @player.Oefeningnummer / @player.AantalOefeningen
            </p>
        </Stack>

        
        
        @* weg? *@
        <p class="oefening-nummer">
            @player.Oefeningnummer / @player.AantalOefeningen
        </p>
        

        <div class="oefening-midden-container">
            
            

            @if (player.Oefening.AantalHerhalingen > 1 && !player.IsKlaar)
            {
                <p class="oefening-herhalingen">
                    <span>@(player.Oefening.AantalHerhalingen)x</span>
                </p>
            }

            @if (player.Oefening.AantalSets > 1 && !player.IsKlaar)
            {
                <p class="oefening-sets">
                    <span>@player.SetNummer&nbsp;/&nbsp;@player.Oefening.AantalSets</span>
                </p>
            }

        </div>

        
        


        <ul class="oefening-tips">
            @foreach (var tip in player.Oefening.Tips)
            {
                <li>@tip</li>
            }
        </ul>


        @if ((player.Oefening.DuurSet > TimeSpan.Zero || player.IsPauze) && !player.IsKlaar)
        {
            <div class="oefening-tijd">
                @if (player.IsPauze)
                {
                    <span class="resterende-tijd">@player.ResterendeTijdPauze.ToString(@"m\:ss")</span>
                }
                else
                {
                    <span class="resterende-tijd">@player.ResterendeTijdSet.ToString(@"m\:ss")</span>
                }
            </div>
        }
    </div>

    <div class="start-stop">
        @if (!player.IsKlaar)
        {
            @if (player.Modus == Modus.Handmatig)
            {
                @if (player.ResterendeTijdSet == player.Oefening.DuurSet && player.ResterendeTijdPauze == player.Oefening.DuurPauze)
                {
                    <button class="btn btn-fw btn-green" @onclick="() => player.Start()">Start</button>
                }
                else
                {
                    <button class="btn btn-fw btn-green" @onclick="() => player.Start()" disabled="@player.IsKlaar">Hervat</button>
                }
            }
            else
            {
                <button class="btn btn-fw btn-red" @onclick="() => player.Stop()">Stop</button>
            }
        }
    </div>

    <Stack>
        <button class="btn btn-fw mr-1" @onclick="() => player.VorigeSet()" disabled="@(player.Vorige == default && player.SetNummer == 1 && !player.IsPauze)">&lt;</button>
        <button class="btn btn-fw" @onclick="() => player.VolgendeSet()" disabled="@(player.Volgende == default && player.SetNummer == player.Oefening.AantalSets && player.IsKlaar)">&gt;</button>
    </Stack>
}

@code
{
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    [Parameter, EditorRequired] public CategorieType Categorie { get; set; }

    private Player? player;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var querystring = QueryHelpers.ParseQuery(uri.Query);
        var oefeningnummer = querystring.ContainsKey("oefening") ? int.Parse(querystring.GetValueOrDefault("oefening").First()!) : 1;
        var set = querystring.ContainsKey("set") ? int.Parse(querystring.GetValueOrDefault("set").First()!) : 1;
        
        player = new Player(Categorie, oefeningnummer, set);
        player.OnTick += PlayerTick;
        player.OnSetChange += PlayerSetChanged;
    }

    private void PlayerTick()
    {
        InvokeAsync(StateHasChanged);
    }

    private void PlayerSetChanged()
    {
        InvokeAsync(async () =>
        {
            try
            {
                await VoortgangPersisteren();
            }
            catch (Exception e)
            {
                Logger.LogError(e, $"Exception in {nameof(PlayerSetChanged)}");
                throw;
            }
        });
    }

    private async Task VoortgangPersisteren()
    {
        var url = Navigation.GetUriWithQueryParameters(new Dictionary<string, object?>
        {
            {"oefening", player!.Oefeningnummer},
            {"set", player!.SetNummer}
        });

        // update querystring
        if (Navigation.ToAbsoluteUri(Navigation.Uri).AbsolutePath == Navigation.ToAbsoluteUri(url).AbsolutePath)
            Navigation.NavigateTo(url);

        if (await IsAuthenticated())
        {
            var m = StateService.Model ?? new PersistedModel();
            m.Changed = DateTime.Now;
            m.Url = Navigation.ToBaseRelativePath(url);
            await GoogleDriveService.SaveAsync(m);
        }
    }

    private async Task<bool> IsAuthenticated()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                return true;
            }
        }
        return false;
    }

    public void Dispose()
    {
        if (player != null)
        {
            player.OnTick -= PlayerTick;
            player.OnSetChange -= PlayerSetChanged;
            player.Dispose();
        }
    }
}
